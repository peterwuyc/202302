88. Merge Sorted Array

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

class Solution {
public void merge(int[] nums1, int m, int[] nums2, int n) {
int len = nums1.length;
int q = m -1;
int p = n-1;

       for(int i = len-1; i >=0 ; i--){
           if(p < 0){
               break;
           }
           if(q>=0 && nums1[q] >= nums2[p]){
               nums1[i] = nums1[q];
               q--;
           }else {
               nums1[i] = nums2[p];
               p--;
           }
       }


    }

}

283. Move Zeroes

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]

class Solution {
public void moveZeroes(int[] nums) {

    int k = 0;
    for(int i = 0; i < nums.length; i++){
        if(nums[i] != 0){
            nums[k] = nums[i];
            k++;
        }
    }

    while(k < nums.length){
        nums[k] = 0;
        k++;
    }



    }

}
