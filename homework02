1.
Create HashMap to save data
Input action+ integer+name as string from keyboard

Example
Add,12,peter. // create Peter as id 12
Update, 12,peter1 // update Peter to Peter1
Get. //print map
Delete,12// remove Peter from map


public class Student implements Comparable<Student> {

    private String name;
    private int age;
    private String email;

    @Override
    public String toString() {
        return "Student{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", email='" + email + '\'' +
                '}';
    }

    public Student(String name) {
        this.name = name;

    }

    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getEmail() {
        return email;
    }


    @Override
    public int compareTo(Student o) {
        return this.name.compareTo(o.name);
    }
}


public class StreamJava8 {
    public static Map<Integer, Student> map = new HashMap<>();

    static {
        map.put(1, new Student("peter", 20));
        map.put(2, new Student("jacky", 50));
        map.put(3, new Student("alan", 33));
        map.put(4, new Student("zello", 63));
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            String s = scanner.next();
            System.out.println(s);

            String[] str = s.split(",");

            if (str[0].equals("add")) {
                Integer id = Integer.parseInt(str[1]);
                String name = str[2];
                Student s1 = new Student(name);
                map.put(id, s1);

            } else if (str[0].equals("list")) {
                for (Map.Entry<Integer, Student> entry : map.entrySet()) {
                    System.out.println("id : " + entry.getKey() + " " + entry.getValue());
                }

            } else if (str[0].equals("get")) {
                Integer id = Integer.parseInt(str[1]);
                System.out.println(map.get(id));

            } else if (str[0].equals("remove")) {
                Integer id = Integer.parseInt(str[1]);
                map.remove(id);

            } else if (str[0].equals("sort")) {
                List<Student> list = new ArrayList<>();
                for (Map.Entry<Integer, Student> entry : map.entrySet()) {
                    list.add(entry.getValue());
                }
                Collections.sort(list);
                System.out.println(list);

            } else if (str[0].equals("sortByAge")) {
                List<Student> list = new ArrayList<>();
                for (Map.Entry<Integer, Student> entry : map.entrySet()) {
                    list.add(entry.getValue());
                }
                list = list.stream().sorted((a, b) -> a.getAge() - b.getAge()).collect(Collectors.toList());
                System.out.println(list);

            } else if (str[0].equals("filter")) {
                List<Student> list = new ArrayList<>();
                for (Map.Entry<Integer, Student> entry : map.entrySet()) {
                    Student student = entry.getValue();
                    if (student.getAge() > 20) {
                        System.out.println(student);
                    }

                }

            }

        }
    }
}
