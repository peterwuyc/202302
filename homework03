leetcode 206 easy 

Given the head of a singly linked list, reverse the list, and return the reversed list.

Input: head = [1,2,3,4,5]. 1->2->3->4->5
Output: [5,4,3,2,1]. 5->4->3->2->1

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
  // recursive way
  public ListNode reverseList1(ListNode head) {
     if (head == null || head.next == null) {  // will use head.next.next, need to check head.next not null
                // if next is null, that's the new head
                return head;
            }

    ListNode newHead = reverseList(head.next);
    head.next.next = head;
    head.next = null;  // release
    return newHead;
  }

  // iterative way
  public ListNode reverseList2(ListNode head) {
      ListNode prev = null, cur = head;
      while (cur != null) {
          ListNode nextNode = cur.next;
          cur.next = prev;
          prev = cur;
          cur = nextNode;
      }
      return prev;
  }

}


83
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

Input: head = [1,1,2]
Output: [1,2]

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
         ListNode cur = head;

        while (cur != null && cur.next != null) {
            if (cur.next.val == cur.val) {
                cur.next = cur.next.next;
            } else {
                cur = cur.next;
            }
        }

        return head;
    }
}
