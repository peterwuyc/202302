leetcode 206 easy 

Given the head of a singly linked list, reverse the list, and return the reversed list.

Input: head = [1,2,3,4,5]. 1->2->3->4->5
Output: [5,4,3,2,1]. 5->4->3->2->1

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
  public ListNode reverseList(ListNode head) {
       //two solutions--recursive/iterate

       //recursive solution
       if(head == null || head.next == null) return head;

       ListNode last = reverseList(head.next);
       head.next.next = head;
       head.next = null;

       return last;

       //iterate
       if(head == null || head.next == null) return head;

       ListNode dummy = new ListNode(-1);
       while(head != null){
            ListNode next = head.next;
            head.next = dummy.next;
            dummy.next = head;
            head = next;
       }

       return dummy.next;
  }
}


83
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

Input: head = [1,1,2]
Output: [1,2]

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode p = head;
        while(p != null){
            while(p.next != null && p.next.val == p.val){
                p.next = p.next.next;
            }
            p = p.next;
        }

        return head;
    }
}
