20. Valid Parentheses
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack= new Stack<>();
        for(int i=0; i<s.length; i++){
            if(s.charAt(i)=='{' ||x.charAt(i)=='[' || x.charAt(i)=='('){
                stack.push(s.charAt(i));
            }
            else{
                if(stack.isEmpty()) return false;
                if((stack.peek()=='(' && s.charAt(i)==')' ) ||
                (stack.peek()=='{' && s.charAt(i)=='}') ||
                (stack.peek() =='[' && s.charAt(i)==']'))
                    stack.pop();
                else return false;
            }
        }
        return (stack.isEmpty());
    }
}

387. First Unique Character in a String
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1

class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for(char c: s.toCharArray())
            map.put(c, map.getOrDefault(c, 0) +1);
        for(int i=0; i< s.length(); i++){
            if(map.containsKey(s.charAt(i)) && map.get(s.charAt(i)) ==1)
                return i;
        }
        return -1;
    }
}