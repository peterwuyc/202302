20. Valid Parentheses
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false

class Solution {
    public boolean isValid(String s) {
        //cc
        if(s == null || s.length() == 0) return false;
        
        Stack<Character> stack = new Stack<>();
        for(char c: s.toCharArray()){
            if(c == '(' || c == '[' || c == '{'){
                stack.push(c);
            }else if(stack.isEmpty()){
                return false;     
            }else if(c == ')' && stack.pop() != '(') {
                return false;
            }else if(c == ']' && stack.pop() != '['){
                return false;
            }else if(c == '}' && stack.pop() != '{'){
                return false;
            }else{
                continue;//如果flow up，有其他字符，比如(a), 也算valid的话
            }
            
        }
        
        return stack.isEmpty();
    }
}

387. First Unique Character in a String
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1

class Solution {
    public int firstUniqChar(String s) {
        //cc
        if (s == null || s.length() == 0) return -1;
        int[] dict = new int[26];
        for (char c : s.toCharArray()) {
            dict[c - 'a']++;
        }

        for (int i = 0; i < s.length(); i++) {
            if (dict[s.charAt(i) - 'a'] == 1) {
                return i;
            }
        }

        return -1;
    }
}
