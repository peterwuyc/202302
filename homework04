20. Valid Parentheses
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false

class Solution {

    /*
    map to save the pairs
    if left, push into the stack
    if right, check if the peek of the stack is its pair


    */

    public boolean isValid(String s) {
        Map<Character, Character> pairMap = new HashMap<>();
        pairMap.put(')', '(');
        pairMap.put(']', '[');
        pairMap.put('}', '{');

        Stack<Character> leftStack = new Stack<>();

        for (char c : s.toCharArray()) {
            if (pairMap.containsKey(c)) {
                if (leftStack.isEmpty() || leftStack.peek() != pairMap.get(c)) {
                    return false;
                } else {
                    leftStack.pop();
                }
            } else {
                leftStack.push(c);
            }
        }

        return leftStack.isEmpty();
    }
}

387. First Unique Character in a String
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1

class Solution {
    // two loop, first to get the count, second to return the first unique char
    public int firstUniqChar(String s) {
        Map<Character, Integer> charCountMap = new HashMap<>();
        for (char c : s.toCharArray()) {
            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
        }
        for (int i = 0; i < s.length(); i++) {
            if (charCountMap.get(s.charAt(i)) == 1)
                return i;
        }
        // if no unique
        return -1;
    }
}
